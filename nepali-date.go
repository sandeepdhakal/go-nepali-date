package main

import (
	"flag"
	"fmt"
	"os"
	"strconv"
	"strings"
	"time"
)

var NPT, err = time.LoadLocation("Asia/Kathmandu")

const (
	MIN_BS_YEAR = 1901
	MAX_BS_YEAR = 2100
	MIN_AD_YEAR = 1845
	MAX_AD_YEAR = 2044
)

var firstDayBS = [200][12]int{
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 12, 41, 71},
	{101, 132, 164, 195, 227, 258, 288, 318, 347, 12, 41, 71},
	{101, 132, 164, 195, 227, 258, 288, 318, 348, 12, 41, 71},
	{102, 133, 164, 195, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 12, 41, 71},
	{101, 132, 164, 195, 227, 258, 288, 318, 348, 12, 41, 71},
	{101, 132, 164, 195, 227, 258, 288, 318, 348, 12, 42, 71},
	{102, 133, 164, 195, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 12, 41, 71},
	{101, 132, 164, 195, 227, 258, 288, 318, 348, 12, 41, 71},
	{101, 132, 164, 195, 227, 258, 288, 318, 348, 12, 42, 71},
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 164, 196, 227, 259, 289, 319, 348, 12, 41, 71},
	{101, 132, 164, 195, 227, 258, 288, 318, 348, 12, 41, 71},
	{102, 132, 164, 195, 227, 258, 288, 318, 348, 12, 42, 71},
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 164, 196, 228, 259, 289, 319, 348, 12, 41, 71},
	{101, 132, 164, 195, 227, 258, 288, 318, 348, 12, 41, 71},
	{102, 132, 164, 195, 227, 258, 288, 318, 348, 12, 42, 71},
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 164, 196, 228, 259, 289, 319, 348, 12, 41, 71},
	{101, 132, 164, 195, 227, 258, 288, 318, 348, 12, 41, 71},
	{102, 133, 164, 195, 227, 258, 289, 318, 348, 13, 42, 71},
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 164, 196, 228, 259, 289, 319, 348, 12, 41, 71},
	{101, 132, 164, 195, 227, 258, 288, 318, 348, 12, 41, 71},
	{102, 133, 164, 195, 227, 258, 289, 318, 348, 13, 42, 72},
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 165, 196, 228, 259, 289, 319, 348, 12, 41, 71},
	{101, 132, 164, 195, 227, 258, 288, 318, 348, 12, 41, 71},
	{102, 133, 164, 195, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 165, 196, 228, 259, 289, 319, 349, 12, 41, 71},
	{101, 132, 164, 195, 227, 258, 288, 318, 348, 12, 42, 71},
	{102, 133, 164, 195, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 165, 196, 228, 259, 289, 319, 349, 12, 41, 71},
	{101, 132, 164, 195, 227, 258, 288, 318, 348, 12, 42, 71},
	{102, 133, 164, 195, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 165, 196, 228, 259, 289, 319, 349, 12, 41, 71},
	{102, 132, 164, 195, 227, 258, 288, 318, 348, 12, 42, 71},
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 164, 196, 227, 259, 289, 319, 348, 13, 42, 72},
	{102, 133, 165, 196, 228, 259, 289, 319, 349, 12, 41, 71},
	{102, 132, 164, 195, 227, 258, 288, 318, 348, 12, 42, 71},
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 164, 196, 228, 259, 289, 319, 348, 13, 42, 72},
	{102, 133, 165, 196, 228, 259, 289, 319, 349, 12, 41, 71},
	{102, 133, 164, 195, 227, 258, 289, 318, 348, 13, 42, 71},
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 164, 196, 228, 259, 289, 319, 348, 13, 42, 72},
	{102, 133, 165, 196, 228, 259, 289, 319, 349, 12, 41, 71},
	{102, 133, 164, 195, 227, 258, 289, 318, 348, 13, 42, 72},
	{102, 133, 164, 196, 227, 258, 289, 319, 348, 13, 42, 72},
	{102, 133, 164, 196, 228, 259, 289, 319, 348, 13, 42, 72},
	{102, 133, 165, 196, 228, 259, 289, 319, 349, 13, 42, 72},
	{103, 134, 165, 196, 228, 259, 290, 319, 349, 14, 43, 73},
	{103, 134, 165, 197, 228, 259, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 13, 43, 72},
	{103, 134, 165, 196, 228, 259, 290, 320, 349, 14, 43, 73},
	{103, 134, 165, 197, 228, 259, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 13, 43, 72},
	{103, 134, 165, 196, 228, 259, 290, 320, 349, 14, 43, 73},
	{103, 134, 165, 197, 228, 259, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 13, 43, 72},
	{103, 134, 165, 197, 228, 259, 290, 320, 349, 14, 43, 73},
	{103, 134, 165, 197, 228, 260, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 134, 166, 197, 229, 260, 290, 320, 350, 13, 43, 72},
	{103, 134, 165, 197, 228, 259, 290, 320, 349, 14, 43, 73},
	{103, 134, 165, 197, 229, 260, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 134, 166, 197, 229, 260, 291, 320, 350, 14, 43, 72},
	{103, 134, 165, 197, 228, 259, 290, 320, 349, 14, 43, 73},
	{103, 134, 165, 197, 229, 260, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 135, 166, 197, 229, 260, 291, 320, 350, 14, 43, 72},
	{103, 134, 165, 197, 228, 259, 290, 320, 349, 14, 43, 73},
	{103, 134, 165, 197, 229, 260, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 135, 166, 197, 229, 260, 291, 320, 350, 14, 43, 73},
	{103, 134, 165, 197, 228, 259, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 135, 166, 197, 229, 260, 291, 321, 350, 14, 43, 73},
	{103, 134, 165, 197, 228, 259, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 44, 73},
	{104, 135, 166, 197, 229, 260, 291, 321, 350, 14, 43, 73},
	{103, 134, 165, 197, 228, 259, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 44, 73},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 14, 43, 73},
	{103, 134, 165, 197, 228, 260, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 134, 166, 197, 229, 260, 290, 320, 350, 14, 44, 73},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 14, 43, 73},
	{103, 134, 165, 197, 229, 260, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 134, 166, 197, 229, 260, 290, 320, 350, 14, 44, 73},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 14, 43, 73},
	{103, 134, 165, 197, 229, 260, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 135, 166, 197, 229, 260, 291, 320, 350, 15, 44, 73},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 14, 43, 73},
	{103, 134, 165, 197, 229, 260, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 135, 166, 197, 229, 260, 291, 320, 350, 15, 44, 74},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 14, 43, 73},
	{103, 134, 165, 197, 229, 260, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 135, 166, 197, 229, 260, 291, 320, 350, 15, 44, 74},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 349, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 44, 73},
	{104, 135, 166, 197, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 44, 73},
	{104, 135, 166, 197, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 134, 166, 197, 229, 260, 290, 320, 350, 14, 44, 73},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 229, 261, 291, 321, 350, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 134, 166, 197, 229, 260, 290, 320, 350, 14, 44, 73},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 230, 261, 291, 321, 350, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 134, 166, 197, 229, 260, 291, 320, 350, 15, 44, 73},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 230, 261, 291, 321, 350, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 135, 166, 197, 229, 260, 291, 320, 350, 15, 44, 74},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 230, 261, 291, 321, 350, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 135, 166, 197, 229, 260, 291, 320, 350, 15, 44, 74},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 350, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 43, 73},
	{104, 135, 166, 197, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 44, 73},
	{104, 135, 166, 197, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 14, 43, 73},
	{103, 134, 166, 197, 229, 260, 290, 320, 350, 14, 44, 73},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 229, 261, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 14, 43, 73},
	{104, 134, 166, 197, 229, 260, 290, 320, 350, 14, 44, 73},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 230, 261, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 14, 43, 73},
	{104, 135, 166, 197, 229, 260, 291, 320, 350, 14, 44, 73},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 230, 261, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 14, 43, 73},
	{104, 135, 166, 197, 229, 260, 291, 320, 350, 15, 44, 73},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 230, 261, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 14, 43, 73},
	{104, 135, 166, 197, 229, 260, 291, 320, 350, 15, 44, 74},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 14, 43, 73},
	{104, 135, 166, 197, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 14, 44, 73},
	{104, 135, 166, 197, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 14, 44, 73},
	{104, 135, 166, 197, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 15, 44, 74},
	{105, 135, 167, 198, 230, 261, 291, 321, 351, 14, 44, 73},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 230, 261, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 15, 44, 74},
	{105, 135, 167, 198, 230, 261, 291, 321, 351, 14, 44, 73},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 230, 261, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 15, 44, 74},
	{105, 136, 167, 198, 230, 261, 292, 321, 351, 15, 44, 73},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 230, 261, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 15, 44, 74},
	{105, 136, 167, 198, 230, 261, 292, 321, 351, 15, 44, 74},
	{104, 135, 166, 198, 229, 260, 291, 321, 350, 15, 44, 74},
	{104, 135, 166, 198, 230, 261, 291, 321, 350, 15, 44, 74},
	{104, 135, 167, 198, 230, 261, 291, 321, 351, 15, 44, 74},
}

var bsMthRange = [12][2]int{
	{9, 10}, {10, 11}, {11, 12}, {12, 1}, {1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9},
}

var adMthRange = [12][2]int{
	{4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}, {10, 11}, {11, 12}, {12, 1}, {1, 2}, {2, 3}, {3, 4},
}

func IsLeapYear(year int) bool {
	return year%4 == 0 && (year%100 != 0 || year%400 == 0)
}

func ADToBS(enDate time.Time) (int, int, int) {
	d := enDate.In(NPT)
	year, month, yDay := d.Year(), int(d.Month()), d.YearDay()

	if year < MIN_AD_YEAR || year > MAX_AD_YEAR {
		fmt.Printf("The year %d is currently not supported.\n", year)
		os.Exit(1)
	}

	bsYear := year + 56
	startMonth, endMonth := bsMthRange[month-1][0], bsMthRange[month-1][1]
	yrIdx := bsYear - MIN_BS_YEAR

	startDay := firstDayBS[yrIdx][startMonth-1]
	endDay := firstDayBS[yrIdx][endMonth-1]

	switch {
	case month == 1:
		if yDay >= endDay {
			return bsYear, endMonth, yDay - endDay + 1
		} else {
			year = year - 1
			day := 365 - startDay + yDay + 1
			if IsLeapYear(year) {
				day = day + 1
			}
			return bsYear, startMonth, day
		}
	case month == 4:
		endDay := firstDayBS[yrIdx][endMonth-1]
		if endDay <= yDay {
			bsYear = bsYear + 1
		}
	case month > 4:
		bsYear = bsYear + 1
		startDay = firstDayBS[yrIdx][startMonth-1]
		endDay = firstDayBS[yrIdx][endMonth-1]
	}

	bsMonth := startMonth
	bsDay := yDay + 1
	if yDay < endDay {
		bsDay = bsDay - startDay
	} else {
		bsDay = bsDay - endDay
		bsMonth = endMonth
	}
	return bsYear, bsMonth, bsDay
}

func BSToAD(year int, month int, day int) time.Time {
	if year < MIN_BS_YEAR || year > MAX_BS_YEAR {
		fmt.Printf("The year %d is currently not supported.\n", year)
		os.Exit(1)
	}

	yrIdx := year - MIN_BS_YEAR
	yDay := firstDayBS[yrIdx][month-1]
	adYear := yrIdx + MIN_AD_YEAR
	if yDay < 100 {
		adYear = adYear + 1
	}
	yDay = yDay + day - 2
	adDate := time.Date(adYear, 1, 1, 0, 0, 0, 0, NPT).AddDate(0, 0, yDay)
	return adDate
}

func main() {
	// nowPtr := flag.Bool("now", true, "date in BS for current local time")
	adPtr := flag.Bool("ad", false, "convert the given date to AD")
	bsPtr := flag.Bool("bs", false, "convert the given date to BS")

	flag.Parse()

	// by default: return the current date in BS calendar
	if flag.NArg() == 0 {
		t1 := time.Now().In(NPT)
		yr, mth, day := ADToBS(t1)
		fmt.Printf("%d-%02d-%02d\n", yr, mth, day)
		return
	}

	if *adPtr && *bsPtr {
		fmt.Println("Only one of 'ad' and 'bs' options are allowed. Got both.")
		return
	}

	dateToConvert := flag.Args()[0]
	c1 := strings.SplitN(dateToConvert, "-", 3)
	c2 := make([]int, len(c1))
	for i, a := range c1 {
		n, err := strconv.Atoi(a)
		if err != nil {
			fmt.Println("Invalid date for conversion")
			os.Exit(1)
			return
		}
		c2[i] = n
	}

	// verify month between 1 and 12
	if c2[1] <= 0 || c2[1] > 12 {
		fmt.Println("Month should be between 1 and 12. Got", c2[1])
		os.Exit(1)
	}

	// verify day between 1 and 32
	if c2[2] <= 0 || c2[2] > 32 {
		fmt.Println("Day should be between 1 and 32. Got", c2[2])
		os.Exit(1)
	}

	if *adPtr {
		adDate := BSToAD(c2[0], c2[1], c2[2])
		fmt.Println(adDate.Format("2006-01-02"))
	} else if *bsPtr {
		adDate, err := time.Parse("2006-01-02", dateToConvert)
		if err != nil {
			fmt.Println("Invalid date for conversion")
			os.Exit(1)
			return
		}
		bsYr, bsMth, bsDay := ADToBS(adDate)
		fmt.Printf("%d-%02d-%02d\n", bsYr, bsMth, bsDay)
	}
}
